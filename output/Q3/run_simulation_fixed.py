#!/usr/bin/env python3
"""
Aspirin Molecular Dynamics Simulation with xTB and PyMOL Visualization - Fixed Version
"""

import os
import sys
import subprocess
import tempfile
from pathlib import Path

# Add the tool directory to Python path
sys.path.insert(0, '/Users/yunhong/Desktop/AgentByAgent/tools/molecular_dynamics_xtb/venv/lib/python3.12/site-packages')

from rdkit import Chem
from rdkit.Chem import AllChem, rdMolDescriptors
import numpy as np
import glob


def generate_aspirin_structure():
    """Generate aspirin molecule structure using RDKit"""
    print("=" * 50)
    print("Step 1: Generating aspirin structure...")
    
    # Aspirin SMILES: CC(=O)OC1=CC=CC=C1C(=O)O
    aspirin_smiles = "CC(=O)OC1=CC=CC=C1C(=O)O"
    
    # Create molecule from SMILES
    mol = Chem.MolFromSmiles(aspirin_smiles)
    if mol is None:
        raise ValueError("Failed to create aspirin molecule from SMILES")
    
    # Add hydrogens
    mol = Chem.AddHs(mol)
    
    # Generate 3D coordinates
    AllChem.EmbedMolecule(mol, randomSeed=42)
    AllChem.MMFFOptimizeMolecule(mol)
    
    print(f"Generated aspirin molecule with {mol.GetNumAtoms()} atoms")
    print(f"Molecular formula: {rdMolDescriptors.CalcMolFormula(mol)}")
    
    return mol


def create_xyz_file(mol, output_dir):
    """Convert RDKit molecule to XYZ format"""
    print("=" * 50)
    print("Step 2: Creating XYZ structure file...")
    
    xyz_file = os.path.join(output_dir, "aspirin.xyz")
    
    # Get atomic symbols and coordinates
    conf = mol.GetConformer()
    num_atoms = mol.GetNumAtoms()
    
    with open(xyz_file, 'w') as f:
        f.write(f"{num_atoms}\n")
        f.write("Aspirin molecule generated by RDKit\n")
        
        for i in range(num_atoms):
            atom = mol.GetAtomWithIdx(i)
            symbol = atom.GetSymbol()
            pos = conf.GetAtomPosition(i)
            f.write(f"{symbol:2s} {pos.x:12.6f} {pos.y:12.6f} {pos.z:12.6f}\n")
    
    print(f"XYZ structure file created: {xyz_file}")
    return xyz_file


def create_xtb_input_file(output_dir):
    """Create xTB input file for MD simulation"""
    print("=" * 50)
    print("Step 3: Creating xTB input file...")
    
    input_file = os.path.join(output_dir, "md.inp")
    
    # Create a simpler input file that works with xTB
    md_input = """$md
   temp=300.0
   time=10.0
   step=1.0
   shake=2
$end
"""
    
    with open(input_file, 'w') as f:
        f.write(md_input)
    
    print(f"MD input file created: {input_file}")
    return input_file


def run_xtb_md_simulation(xtb_path, xyz_file, input_file, output_dir, num_threads=4):
    """Run xTB molecular dynamics simulation"""
    print("=" * 50)
    print("Step 4: Running xTB molecular dynamics simulation...")
    print(f"Using {num_threads} threads...")
    
    # Set environment variables
    env = os.environ.copy()
    env['OMP_NUM_THREADS'] = str(num_threads)
    
    # Run xTB command with XYZ input
    cmd = [
        xtb_path,
        xyz_file,
        "--input", input_file,
        "--md",
        "--gfn", "0"
    ]
    
    print(f"Running command: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(
            cmd,
            cwd=output_dir,
            env=env,
            capture_output=True,
            text=True,
            timeout=600  # 10 minutes timeout
        )
        
        print("xTB Output:")
        print(result.stdout[:2000])  # Show first 2000 chars to avoid too much output
        if len(result.stdout) > 2000:
            print("... (output truncated)")
        
        if result.stderr:
            print("xTB Errors/Warnings:")
            print(result.stderr[:1000])
        
        if result.returncode != 0:
            print(f"xTB failed with return code {result.returncode}")
            # Don't immediately fail, let's check if trajectory was created
        
        # Check for trajectory file
        trj_file = os.path.join(output_dir, "xtb.trj")
        if not os.path.exists(trj_file):
            print("Looking for alternative trajectory file names...")
            # Try other possible trajectory file names
            possible_files = ["xtb_trajectory.xyz", "trajectory.xyz", "md.trj"]
            for fname in possible_files:
                alt_file = os.path.join(output_dir, fname)
                if os.path.exists(alt_file):
                    trj_file = alt_file
                    print(f"Found trajectory file: {trj_file}")
                    break
            else:
                # List all files in output directory
                print("Files in output directory:")
                for f in os.listdir(output_dir):
                    print(f"  {f}")
                raise FileNotFoundError("Trajectory file not found")
        
        print(f"MD simulation completed!")
        print(f"Trajectory file: {trj_file}")
        
        return trj_file
        
    except subprocess.TimeoutExpired:
        raise RuntimeError("xTB simulation timed out")
    except Exception as e:
        raise RuntimeError(f"xTB simulation failed: {str(e)}")


def convert_trj_to_xyz(trj_file, output_dir):
    """Convert xTB trajectory file to XYZ format for PyMOL"""
    print("=" * 50)
    print("Step 5: Converting trajectory to XYZ format...")
    
    # If the trajectory is already in XYZ format, just copy it
    if trj_file.endswith('.xyz'):
        xyz_file = os.path.join(output_dir, "trajectory_for_pymol.xyz")
        import shutil
        shutil.copy2(trj_file, xyz_file)
        print(f"Copied XYZ trajectory: {xyz_file}")
        return xyz_file
    
    xyz_file = os.path.join(output_dir, "trajectory.xyz")
    
    try:
        with open(trj_file, 'r') as f_in, open(xyz_file, 'w') as f_out:
            lines = f_in.readlines()
            
            i = 0
            frame_count = 0
            
            while i < len(lines):
                line = lines[i].strip()
                
                # Look for number of atoms (first line of each frame)
                if line.isdigit():
                    num_atoms = int(line)
                    
                    # Write XYZ header
                    f_out.write(f"{num_atoms}\n")
                    f_out.write(f"Frame {frame_count} - time = {frame_count * 1.0} fs\n")
                    
                    # Write atomic coordinates (skip comment line)
                    i += 1
                    if i < len(lines):
                        i += 1  # Skip comment line
                    
                    # Write coordinate lines
                    for j in range(num_atoms):
                        if i + j < len(lines):
                            f_out.write(lines[i + j])
                    
                    frame_count += 1
                    i += num_atoms
                else:
                    i += 1
            
            print(f"Converted {frame_count} frames to XYZ format")
            
    except Exception as e:
        print(f"Conversion failed: {e}")
        # If direct conversion fails, try alternative approach
        print("Trying alternative conversion method...")
        
        with open(trj_file, 'r') as f_in:
            content = f_in.read()
            
        with open(xyz_file, 'w') as f_out:
            f_out.write(content)
    
    return xyz_file


def create_pymol_script(xyz_file, output_dir, gif_name="md_animation.gif"):
    """Create PyMOL script to generate animated GIF from trajectory"""
    print("=" * 50)
    print("Step 6: Creating PyMOL visualization script...")
    
    script_file = os.path.join(output_dir, "make_gif.pml")
    
    # Use absolute paths
    abs_xyz_file = os.path.abspath(xyz_file)
    abs_output_dir = os.path.abspath(output_dir)
    
    pymol_script = f"""# Load trajectory
load {abs_xyz_file}, aspirin_traj

# Set up visualization
hide everything
show sticks, aspirin_traj
color atomic, aspirin_traj
set stick_radius, 0.15
set sphere_scale, 0.3

# Set up camera and lighting  
center aspirin_traj
zoom aspirin_traj, 5
set antialias, 2
set ray_shadows, 1

# Create animation settings
set movie_fps, 5

# Generate frames and save as PNG
python
import pymol
from pymol import cmd
import os

# Get number of states
num_states = cmd.count_states("aspirin_traj")
print(f"Number of frames: {{num_states}}")

if num_states > 1:
    # Save individual PNG frames
    for i in range(1, num_states + 1):
        cmd.frame(i)
        frame_file = f"{abs_output_dir}/frame_{{i:04d}}.png"
        cmd.png(frame_file, width=800, height=600, dpi=150, ray=1)
        print(f"Saved frame {{i}}")
else:
    print("Only one frame found, saving single image")
    cmd.png(f"{abs_output_dir}/aspirin_structure.png", width=800, height=600, dpi=150, ray=1)

python end

# Exit PyMOL
quit
"""
    
    with open(script_file, 'w') as f:
        f.write(pymol_script)
    
    print(f"PyMOL script created: {script_file}")
    return script_file


def run_pymol_script(script_file):
    """Run PyMOL script to generate animation frames"""
    print("=" * 50)
    print("Step 7: Running PyMOL to generate animation frames...")
    
    try:
        # Try different PyMOL executable names
        pymol_commands = ['pymol', 'PyMOL', '/Applications/PyMOL.app/Contents/bin/pymol']
        
        for pymol_cmd in pymol_commands:
            try:
                print(f"Trying PyMOL command: {pymol_cmd}")
                result = subprocess.run(
                    [pymol_cmd, '-c', script_file],
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                
                print(f"PyMOL return code: {result.returncode}")
                print("PyMOL stdout:")
                print(result.stdout)
                
                if result.stderr:
                    print("PyMOL stderr:")
                    print(result.stderr)
                
                if result.returncode == 0:
                    print("PyMOL script executed successfully!")
                    return True
                    
            except FileNotFoundError:
                print(f"PyMOL command '{pymol_cmd}' not found")
                continue
            except subprocess.TimeoutExpired:
                print(f"PyMOL command '{pymol_cmd}' timed out")
                continue
        
        print("Warning: Could not execute PyMOL, but continuing...")
        return False
        
    except Exception as e:
        print(f"PyMOL execution failed: {str(e)}")
        return False


def create_gif_from_frames(output_dir, gif_name="md_animation.gif"):
    """Create GIF from PNG frames using imageio"""
    print("=" * 50)
    print("Step 8: Creating animated GIF...")
    
    try:
        import imageio
        
        frame_files = sorted(glob.glob(os.path.join(output_dir, "frame_*.png")))
        if not frame_files:
            print("No frame files found, checking for single structure image...")
            single_image = os.path.join(output_dir, "aspirin_structure.png")
            if os.path.exists(single_image):
                print(f"Found single structure image: {single_image}")
                return single_image
            else:
                print("No PNG files found")
                return None
        
        print(f"Creating GIF from {len(frame_files)} frames...")
        
        gif_file = os.path.join(output_dir, gif_name)
        with imageio.get_writer(gif_file, mode='I', duration=0.2) as writer:
            for frame_file in frame_files:
                image = imageio.imread(frame_file)
                writer.append_data(image)
        
        print(f"GIF created successfully: {gif_file}")
        return gif_file
        
    except Exception as e:
        print(f"Failed to create GIF: {str(e)}")
        return None


def main():
    """Main simulation workflow"""
    output_dir = "/tmp/aspirin_md"
    xtb_path = "/Users/yunhong/miniconda3/envs/matdata/bin/xtb"
    num_threads = 4
    
    print("Starting Aspirin Molecular Dynamics Simulation")
    print(f"Output directory: {output_dir}")
    print(f"xTB path: {xtb_path}")
    print(f"Number of threads: {num_threads}")
    
    try:
        # Step 1: Generate aspirin structure
        mol = generate_aspirin_structure()
        
        # Step 2: Create XYZ file
        xyz_file = create_xyz_file(mol, output_dir)
        
        # Step 3: Create xTB input file
        input_file = create_xtb_input_file(output_dir)
        
        # Step 4: Run xTB MD simulation
        trj_file = run_xtb_md_simulation(xtb_path, xyz_file, input_file, output_dir, num_threads)
        
        # Step 5: Convert trajectory to XYZ
        xyz_trajectory = convert_trj_to_xyz(trj_file, output_dir)
        
        # Step 6: Create PyMOL script
        script_file = create_pymol_script(xyz_trajectory, output_dir)
        
        # Step 7: Run PyMOL to generate frames
        pymol_success = run_pymol_script(script_file)
        
        # Step 8: Create GIF
        final_gif = create_gif_from_frames(output_dir)
        
        print("=" * 50)
        print("SIMULATION COMPLETED!")
        print(f"Output directory: {output_dir}")
        print(f"Initial structure: {xyz_file}")
        print(f"Trajectory file: {trj_file}")
        print(f"XYZ trajectory: {xyz_trajectory}")
        print(f"PyMOL script: {script_file}")
        if final_gif:
            print(f"Animation/Image: {final_gif}")
        
        # List all output files
        print("\nAll output files:")
        for f in sorted(os.listdir(output_dir)):
            file_path = os.path.join(output_dir, f)
            size = os.path.getsize(file_path)
            print(f"  {f} ({size} bytes)")
        
        return {
            'output_dir': output_dir,
            'trajectory_file': trj_file,
            'xyz_trajectory': xyz_trajectory,
            'pymol_script': script_file,
            'animation_file': final_gif,
            'initial_structure': xyz_file
        }
        
    except Exception as e:
        print(f"Simulation failed: {str(e)}")
        print(f"Output directory (for debugging): {output_dir}")
        raise


if __name__ == "__main__":
    main()